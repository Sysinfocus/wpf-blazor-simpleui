@inherits LayoutComponentBase
@using windowState = System.Windows.WindowState

<div class="container" @onclick="initialization.HandleMainLayoutClickEvent">
    <Sidebar Items="@sideBarItems" Show="@showMenu" IsSimpleSideBar="@isSimple"  Height="100%" OnMenuClick="HandleMenuClick"
        HoverBackground="purple" HoverForeground="white">
        <SidebarHeader>
            <h4 class="large g8 flex jcc mt05 mb05 pointer" @onclick="@(() => browserExtensions.Goto("."))">
                <Icon Name="sensors" Size="32px" />
                WPF Blazor SimpleUI
            </h4>
        </SidebarHeader>
        <SidebarFooter>
            <small class="muted-color flex jcc mt05 mb05" style="font-size:0.7rem">&copy; 2025, WPF Blazor SimpleUI.</small>
        </SidebarFooter>
    </Sidebar>

    <div class="flex-col g8 f1">
        <div class="flex jcsb" style="padding: 1rem 1rem 0.25rem">
            <div class="flex">
                <Icon Size="20px" Name="apps" Tooltip="Show/Hide Sidebar" OnClick="() => showMenu = !showMenu" />
                <Icon Size="20px" Name="switch" Tooltip="Toggle Sidebar Type" OnClick="() => isSimple = !isSimple" />
            </div>
            <div class="flex">
                <Icon Size="20px" Name="@(initialization.CurrentTheme == "light" ? "dark_mode" : "light_mode")" Tooltip="Toggle Theme" OnClick="initialization.ToggleTheme" />
                <Icon Size="20px" Name="minimize" Tooltip="Minimize" OnClick="HandleMinimized" />
                <Icon Size="20px" Name="fullscreen" Tooltip="Maximize / Restore" OnClick="HandleMaximizedRestore" />
                <Icon Size="20px" Name="close" Tooltip="Close" OnClick="HandleClose" />
            </div>
        </div>
        <Separator />
        <div style="padding: 0.25rem 1rem">@Body</div>
    </div>
</div>

@code
{
    bool showMenu = true, isSimple;

    SideBarItem[] sideBarItems = [
        new("Navigation", 1, 0, "Home", "home"),
        new("Navigation", 2, 0, "Counter", "add"),
        new("Navigation", 3, 0, "Weather", "cloud"),
    ];

    private void HandleMenuClick(SideBarItem item)
    {
        browserExtensions.Goto(item.Name);
        App.Current.MainWindow.Title = item.Name;
    }

    private void HandleMinimized(MouseEventArgs args)
        => App.Current.MainWindow.WindowState = windowState.Minimized;

    private void HandleMaximizedRestore(MouseEventArgs args)
        => App.Current.MainWindow.WindowState = App.Current.MainWindow.WindowState == windowState.Maximized
            ? windowState.Normal
            : windowState.Maximized;

    private void HandleClose(MouseEventArgs args) => App.Current.MainWindow.Close();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await initialization.InitializeTheme();
    }
}